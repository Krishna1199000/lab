generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role            @default(USER)
  profile       Profile?
  labs          Lab[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?  @db.Text
  role        String?
  company     String?
  location    String?
  github      String?
  twitter     String?
  linkedin    String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lab {
  id            String    @id @default(cuid())
  title         String
  difficulty    Difficulty @default(BEGINNER)
  duration      Int
  description   String    @db.Text
  objectives    String[]
  audience      String    @db.Text
  prerequisites String    @db.Text
  environmentImageBefore String?
  environmentImageAfter  String?
  coveredTopics String[]
  steps         Json
  published     Boolean   @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}